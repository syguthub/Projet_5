@startuml

skinparam class {
  borderColor black
  backgroundColor<< interface >> GreenYellow
  backgroundColor<< class >> LightCyan
  backgroundColor<< static >> NavajoWhite
  backgroundColor<< abstract >> pink
  backgroundColor<< enum >> application

}

class Project <<class>> {
    -id : long
    -name : String
    -color : int
-- constructor--
    + Project(long id, @NonNull String name, @ColorInt int color)
..
    + getAllProjects() : Project[]
    + getProjectById(id) : Project
    + getId() : long
    + getName() : String
    + getColor() : int
    + setColor(color) : void
    + setName( String name) : void
    + setId(id) : void
    + toString() : String()
}

class Task <<class>> {
    - id : long
    - projectId :long
    - name : String
    - creationTimestamp : long
-- constructor--
    + Task(long projectId, @NonNull String name, long creationTimestamp)(projectId)
..
    + getId() : long
    + getProject() : Project
    + getProjectId() : long
    + getName() : String
    + getCreationTimestamp() : long
    + setId(id) : void
    + setProjectId(projectId) : void
    + setName(@NonNull String name) : void
    + setCreationTimestamp(creationTimestamp) : void
}

class TaskRecentComparator <<static>> {
    + compare(Task left, Task right) : int
}

class TaskOldComparator <<static>> {
    + compare(Task left, Task right) : int
}

class TaskAZComparator <<static>> {
    + compare(Task left, Task right) : int
}

class TaskZAComparator <<static>> {
    + compare(Task left, Task right) : int
}

interface ProjectDao <<interface>>{
    get_All_Projects : LiveData <Project[]>
}

interface TaskDao <<interface>> {
    delete_Task(taskId) : void
    inset_Task(task) : void
    get_Task: LiveData<List<Task>>
}

class ProjectDaoRepository <<class>> {
    - projectDao : ProjectDao
-- constructor--
    + ProjectDaoRepository(projectDao)
..
    + get_All_Projects() : LiveData <Project[]>
}

class TaskDaoRepository <<class>> {
    - taskDao : TaskDao
-- constructor--
    + TaskDaoRepository(TaskDao)
..
    + inset_Task(task)
    + delete_Task(taskId)
    + get_Tasks() : LiveData<List<Task>>
}

abstract class SaveMyTripDataBase <<abstract>> {
    - {static} INSTANCE : SaveMyTripDataBase
    + {abstract} taskDao() : TaskDao
    + {abstract} projectDao() : ProjectDao
    + {static} getINSTANCE(Context context)() : SaveMyTripDataBase
    - {static} prepopulateDataBase() : Callback
}

class Injection <<class>> {
    + {Static} provide_Task_Dao_Source(Context context)() : TaskDaoRepository
    + {Static} provide_Project_Dao_Source(context) : ProjectDaoRepository
    + {Static} provide_Executor() : Executor
    + {Static} provide_View_Model_Factory(context) : ViewModelFactory
}

class ViewModelFactory <<class>> {
    - taskDaoSource : TaskDaoRepository
    - projectDaoSource : ProjectDaoRepository
    - executor : Executor
-- constructor--
    + ViewModelFactory(taskDaoSource,projectDaoSource,executor)
..
    + create(@NonNull Class<T> modelClass) : T
}

class ItemViewModel <<class>> {
    - taskDaoSource : TaskDaoRepository
    - projectDaoSource : ProjectDaoRepository
    - executor : Executor
    - current_task : LiveData <List<Task>>
    - projects : LiveData <Project[]>
-- constructor--
    + ItemViewModel(taskDaoSource,projectDaoSource,executor)
..
    + init() : void
    + get_All_Projects() : LiveData <Project[]>
    + inset_Task(task) : void
    + delete_Task(taskId) : void
    + get_Tasks() : LiveData <List<Task>>
}

class MainActivity <<class>> {
    - allProjects : Project[]
    - tasks : ArrayList<Task> : Integer
    - adapter : TasksAdapter
    - {static} sortMethod : SortMethod
    - listTasks : RecyclerView
    - lblNoTasks : TextView
    - itemViewModel : ItemViewModel
-- constructor--
    + onCreate(@Nullable Bundle savedInstanceState) : void
..
    + onCreateOptionsMenu(menu) : Boolean
    + onOptionsItemSelected(item) : Boolean
    + onDeleteTask(task) : void
    + data_Callback_AlertDialog_To_Add_A_Task(String taskName, Project taskProject) : void
    - configuration_View() : void
    - ItemViewModel_manager() : void
    - get_Project() : void
    - update_Project(project) : void
    - get_Tasks() : void
    - updateTasks(tasks) : void
    - showAddTaskDialog() : void
    - addTask(@NonNull Task task) : void
}

enum SortMethod <<enum>> {
     ALPHABETICAL
     ALPHABETICAL_INVERTED
     RECENT_FIRST
     OLD_FIRST
     NONE
}

class DialogAlert <<class>> {
    - dialog : AlertDialog
    - dialogEditText : EditText
    - dialogSpinner : Spinner
    - interface_alertDialog : Interface_alertDialog
    - allProjects : Project
-- constructor--
    + onCreateDialog(@Nullable Bundle savedInstanceState) : Dialog
..
    + onAttach(@NonNull Context context) : void
    - onPositiveButtonClick(dialogInterface) : void
    + set_Project(Project [] allProjects)() : void
    - populateDialogSpinner() : void
}


interface Interface_alertDialog <<interface>> {
    + data_Callback_AlertDialog_To_Add_A_Task(taskName,taskProject)
}

class TasksAdapter <<class>> {
    - tasks : List<Task>
    - deleteTaskListener : DeleteTaskListener
-- constructor--
    + TasksAdapter(@NonNull final List<Task> tasks, @NonNull final DeleteTaskListener deleteTaskListener)
..
      updateTasks(@NonNull final List<Task> tasks) : void
    + onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) : TaskViewHolder
    + onBindViewHolder(@NonNull TaskViewHolder taskViewHolder, int position) : void
    + getItemCount() : int
}

class TaskViewHolder <<class>> {
    - imgProject : AppCompatImageView
    - lblTaskName : TextView
    - lblProjectName : TextView
    - imgDelete : TextView
    - deleteTaskListener : DeleteTaskListener
-- constructor--
    + TaskViewHolder(@NonNull View itemView, @NonNull DeleteTaskListener deleteTaskListener)
..
    bind(task) : void
}

interface DeleteTaskListener <<interface>>{
    + onDeleteTask(task) : void
}

Task "1" --> "1" TaskAZComparator
Task "1" --> "1" TaskZAComparator
Task "1" --> "1" TaskOldComparator
Task "1" --> "1" TaskRecentComparator

ProjectDaoRepository "1" --> "1" ProjectDao
TaskDaoRepository "1" --> "1" TaskDao

TasksAdapter "1" --|> "1" TaskViewHolder
TasksAdapter "1" ..> "1" DeleteTaskListener

DialogAlert "1" ..> "1" Interface_alertDialog

MainActivity "1" --> "1" TasksAdapter
MainActivity "1" --> "1" SortMethod
MainActivity "1" --> "1" ItemViewModel
MainActivity "1" --> "1" ViewModelFactory
MainActivity "1" --> "1" Injection
MainActivity "1" --> "1" DialogAlert
MainActivity "1" --> "1" Project

Injection  "1" --> "1" TaskDaoRepository
Injection  "1" --> "1" ProjectDaoRepository
Injection  "1" --> "1" ViewModelFactory

ViewModelFactory "1" --> "1" TaskDaoRepository
ViewModelFactory "1" --> "1" ProjectDaoRepository

ItemViewModel "1" --> "1" TaskDaoRepository
ItemViewModel "1" --> "1" ProjectDaoRepository

SaveMyTripDataBase "1" ..> "1" TaskDao
SaveMyTripDataBase "1" ..> "1" ProjectDao

Task "*" --> "1" Project

@enduml